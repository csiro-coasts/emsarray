name: Build, test, and lint
on:
  push:
    branches:
      - main
    tags:
      - "v[0-9]+.*"
  pull_request:
    branches:
      - "*"

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      python_version: "3.11"
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_version }}
          cache: 'pip'

      - name: Build python package
        shell: bash -l {0}
        run: |
          pip install build
          python3 -m build

      - uses: actions/upload-artifact@v3
        with:
          name: "Python package"
          path: dist

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: ["build"]

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/environment
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run tests
        shell: bash -l {0}
        run: |
          pytest -v \
            --junitxml=junit-py${{ matrix.python-version }}.xml \
            --cov --cov-report term \
            --cov-report xml:coverage-${{ matrix.python-version }}.xml

      - name: JUnit Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: 'junit-py*.xml'
          check_name: "JUnit Test Report - Python ${{ matrix.python-version }}"

      - uses: actions/upload-artifact@v3
        with:
          name: Code coverage for Python ${{ matrix.python-version }}
          path: coverage-*.xml

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: ["build"]

    defaults:
      run:
        shell: bash -l {0}

    env:
      python_version: "3.11"

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/environment
        with:
          python-version: ${{ env.python_version }}

      - name: 'mypy cache'
        uses: actions/cache@v3
        with:
          path: '.mypy_cache'
          key: mypy-${{ runner.os }}-py${{ env.python_version }}-${{ hashFiles('requirements.txt') }}

      - run: flake8 src/ tests/
      - run: isort --diff --check-only src/ tests/
      - run: mypy --junit-xml report-mypy.xml src/

  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: ["build"]

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/environment
        with:
          python-version: "3.11"

      - run: |
          cd docs/
          sphinx-build -b dirhtml -aEW . _build/dirhtml

      - uses: actions/upload-artifact@v3
        with:
          name: Docs
          path: docs/_build/dirhtml

  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: ['test', 'lint', 'docs']
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      - name: Fetch Python package
        uses: actions/download-artifact@v3
        with:
          name: "Python package"
          path: "dist"

      - name: "Check tag matches version"
        shell: bash -l {0}
        run: |
          VERSION="$( echo "${{ github.ref }}" | sed 's!refs/tags/v!!' )"
          echo "Looking for packages with version $VERSION"
          ls -l dist/*
          packages=(
            "dist/emsarray-$VERSION.tar.gz"
            "dist/emsarray-$VERSION-*.whl"
          )
          for package in "${packages[@]}" ; do
            if ! test -e $package ; then
              echo "Could not find $package"
              exit 1
            fi
          done

      - name: "Publish Python package"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
